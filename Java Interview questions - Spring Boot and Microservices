1. @Controller vs @RestController(Combination of ResponseBody and Controller)
2. How a Spring Boot application Bootstrap?
      @SpringBootApplication = @ComponentScan + @EnableAutoConfiguration + @SpringBootConfiguration
      @EnableAutoConfiguration along with @ConditionalXX annotations helps Spring boot application to configure itself automatically.
3. Best Standards to follow when creating RestAPI?
      Use Richardson Maturity Model to evaluate the design of rest api's 
      - versioning  (Apart from URI, Versioning can be done through Query Parameter, Header, and Content Negotiation
      -- documentation
      - Right Status code for response
      - Content Negotiation
      - Error Handling
      - Rest API should be Stateless
      -Secure your Rest API
      - Implement Pagination/Sorting/Filtering

4. Architectures 

      Use Registration and Discovery Pattern to Manage Instances when in a Microservice based architecture. Based on the demand we scale only those required services in 
      a Microservice based Architecture. SO the pattern we use is R and D pattern. 

      In a certain time interval ( 30 sec for eureka), the registered microservices send heart beat to Discovery Server(DS) to confirm that they are active. If the 
      heart beat is missing DS removes it from the registry, and so does the client of DS

      Client Side Load Balancing vs Server Side Load Balancing
            Server Side LB - A single server will be present and wehenever a request comes, the server side load balancer routes it to the service instance. This also means 
            the Server Side LB is a Single Point of failure. (Traditional Load Balancing)

      Client LB: Each service has its cache. load balancing happens at the client side. In this case there is no need of an extra server for the load balancing work.
      (Example : Spring Cloud LoadBalancer)

- Fault Tolerance : Microservices should be Resilent we use Resilent 4J
      - Circuit Breaker Pattern
      Retry Pattern 
      Rate Limiter Pattern
      Bulk Pattern 

Lets Say suppose there is A service and there is hacker who is continuously hitting the service so that it reaches the limit and fails and crashes. How do we prevent that?

- You can use limit the number of reuqest to a microservice with a rate limiter pattern implementation (eg- only 5 calls per mint)
